from telebot.async_telebot import AsyncTeleBot
from config import token
from send import send_application 
from funcs.db import Database
from markups.markups import mainButton, coursesMarkup, edit_markup
from telebot.types import InlineKeyboardButton
import asyncio

bot = AsyncTeleBot(token)

db = Database('Database.db')
steps = {}

@bot.message_handler(commands=['start'])
async def start(message):
    global steps
    if db.is_register(message.from_user.id):
        db.register_user(message.from_user.id)
    await bot.send_message(message.from_user.id, text='–ü—Ä–∏–≤–µ—Ç\n–ú–µ–Ω—è –∑–æ–≤—É—Ç –ê–ª–≥–æ–±–æ—Ç.\n–Ø –ø–æ–º–æ–≥—É –ø–æ–¥–æ–±—Ä–∞—Ç—å –Ω—É–∂–Ω—ã–π –∫—É—Ä—Å –¥–ª—è –í–∞—à–µ–≥–æ —Ä–µ–±—ë–Ω–∫–∞ üòä \n–ù–∞–∂–º–∏—Ç–µ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É üìÉ" –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∫—Ä–∞—Ç–µ–Ω—å–∫–æ–π –∞–Ω–∫–µ—Ç—ã. –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ –ø–æ—Å—Ç—É–ø–∏—Ç –Ω–∞—à–µ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É üë©\n–î–ª—è –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è —Å –Ω–∞—à–∏–º–∏ –∫—É—Ä—Å–∞–º–∏ –Ω–∞–∂–º–∏—Ç–µ "–£–∑–Ω–∞—Ç—å –∫—É—Ä—Å—ã üìö"', reply_markup=mainButton)

@bot.message_handler()
async def sss(message):
    global steps, years, name, number
    print(steps)

    if message.text == '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É üìÉ':
        steps[message.from_user.id] = 1
        # —Ç—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—é. 
        await bot.send_message(message.from_user.id, text='–ù–∞—á–Ω–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã?')

    if message.text == '–£–∑–Ω–∞—Ç—å –∫—É—Ä—Å—ã üìö':
        list_course = db.showCourse()
        num = 0
        for course in list_course:
            print(course)
            coursesMarkup.add(InlineKeyboardButton(course, callback_data=f'{num}_{message.from_user.id}'))
            num += 1


    if steps[message.from_user.id] == 1: #—Å—é–¥–∞ –ø—Ä–∏–¥—ë—Ç –∏–º—è —Ä–µ–±—ë–Ω–∫–∞
        name = message.text
        db.add_name(message.from_user.id, name)
        await bot.send_message(message.from_user.id, text='–°–∫–æ–ª—å–∫–æ –ª–µ—Ç –≤–∞—à–µ–º—É —Ä–µ–±–µ–Ω–∫—É?')
        steps[message.from_user.id] = 2
        
    elif steps[message.from_user.id] == 2: #—Å—é–¥–∞ –ø—Ä–∏–¥—ë—Ç –≤–æ–∑—Ä–∞—Å—Ç —Ä–µ–±—ë–Ω–∫–∞
        years = message.text
        db.add_old(message.from_user.id , years)
        steps[message.from_user.id] = 3
        await bot.send_message(message.from_user.id, text='–£–∫–∞–∂–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç (–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞)')

    elif steps[message.from_user.id] == 3: #—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏
        steps[message.from_user.id] = 4
        await bot.send_message(message.from_user.id, text='–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞—è–≤–∫—É?', reply_markup=edit_markup)

    elif steps[message.from_user.id] == 4: 
        number = message.text
        db.add_phone(message.from_user.id, number)
        await bot.send_message(message.from_user.id, text=f'–ó–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞—à–µ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É')
        message = f'–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!\n–ò–º—è - {name} \n–í–æ–∑—Ä–∞—Å—Ç - {years} \n–ò–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –∫—É—Ä—Å -   \n–ù–æ–º–µ—Ä —Ä–æ–¥–∏—Ç–µ–ª—è  -  {number}  \n–ó–∞–ø–∏—Å—å –Ω–∞ –∫—É—Ä—Å - \n–ü–û–†–ê –†–ê–ë–û–¢–ê–¢–¨!  '
        send_application(user_id=5221339225, token=token, message=message)

    elif steps[message.from_user.id] == 10:
        name = message.text
        await bot.send_message(message.from_user.id, text='–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞—è–≤–∫—É?', reply_markup=edit_markup)
    
    elif steps[message.from_user.id] == 11:
        years = message.text
        await bot.send_message(message.from_user.id, text='–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞—è–≤–∫—É?', reply_markup=edit_markup)
    
    elif steps[message.from_user.id] == 12:
        number = message.text
        await bot.send_message(message.from_user.id, text='–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞—è–≤–∫—É?', reply_markup=edit_markup)

    ################33333

@bot.callback_query_handler(func=lambda call: True)
async def get_callback(call): 
    if call.data == 'name':
        message = call
        name = await bot.send_message(message.from_user.id, text='–ò–º—è –í–∞—à–µ–≥–æ —Ä–µ–±–µ–Ω–∫–∞?')
        steps[call.from_user.id]=10
    if call.data == 'years':
        message = call
        years = await bot.send_message(message.from_user.id, text='–°–∫–æ–ª—å–∫–æ –ª–µ—Ç –≤–∞—à–µ–º—É —Ä–µ–±–µ–Ω–∫—É?')
        steps[call.from_user.id]=11
    if call.data == 'number':
        message = call
        number = await bot.send_message(message.from_user.id, text='–£–∫–∞–∂–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç (–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞)')
        steps[call.from_user.id]=12
    if call.data == 'send':
        steps[call.from_user.id]=4
        

async def main():
    await bot.infinity_polling()

if __name__ == "__main__":
    asyncio.run(main())
    
